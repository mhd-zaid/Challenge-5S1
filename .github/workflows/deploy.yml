name: CD

on:
  workflow_dispatch:
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      VITE_BACKEND_URL: ${{ vars.VITE_BACKEND_URL }}
      APP_ENV: ${{ vars.APP_ENV }}
      APP_SECRET: ${{ secrets.APP_SECRET }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      MESSENGER_TRANSPORT_DSN: "${{ vars.MESSENGER_TRANSPORT_DSN }}"
      MAILER_DSN: "${{ secrets.MAILER_DSN }}"
      CORS_ALLOW_ORIGIN: ${{ vars.CORS_ALLOW_ORIGIN }}
      JWT_SECRET_KEY: "${{ vars.JWT_SECRET_KEY }}"
      JWT_PUBLIC_KEY: "${{ vars.JWT_PUBLIC_KEY }}"
      JWT_PASSPHRASE: ""
      FRONTEND_URL: ${{ vars.FRONTEND_URL }}
      INSEE_API_URL: ${{ secrets.INSEE_API_URL }}
      INSEE_API_KEY: ${{ secrets.INSEE_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2.18"

      - name: .env.local client
        run: |
          echo "VITE_BACKEND_URL=$VITE_BACKEND_URL" > client/.env.local

      - name: prepare client
        run: |
          cd client
          npm install
          npm run build
          cd ..
      
      - name: .env.local server
        run: |
         echo "APP_ENV=$APP_ENV" > server/.env.local
          echo "APP_SECRET=$APP_SECRET" >> server/.env.local
          echo "DATABASE_URL=$DATABASE_URL" >> server/.env.local
          echo "MESSENGER_TRANSPORT_DSN=$MESSENGER_TRANSPORT_DSN" >> server/.env.local
          echo "MAILER_DSN=$MAILER_DSN" >> server/.env.local
          echo "CORS_ALLOW_ORIGIN=$CORS_ALLOW_ORIGIN" >> server/.env.local
          echo "JWT_SECRET_KEY=$JWT_SECRET_KEY" >> server/.env.local
          echo "JWT_PUBLIC_KEY=$JWT_PUBLIC_KEY" >> server/.env.local
          echo "JWT_PASSPHRASE=$JWT_PASSPHRASE" >> server/.env.local
          echo "FRONTEND_URL=$FRONTEND_URL" >> server/.env.local
          echo "INSEE_API_URL=$INSEE_API_URL" >> server/.env.local
          echo "INSEE_API_KEY=$INSEE_API_KEY" >> server/.env.local
          
      - name: prepare server
        run: |
          cd server
          composer install
          php bin/console lexik:jwt:generate-keypair
          cd ..
          
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Production
        env:
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_PATH: ${{ secrets.REMOTE_PATH }}
        run: |
          echo "backup current version"
          ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "rm -rf /var/www/save/* && mv /var/www/Challenge-5S1/* /var/www/save/"
          echo "Deploying to production"
          rsync -avz --delete \
            -e "ssh -o StrictHostKeyChecking=no" \
            ./ \
            $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH
          echo "run migrations"
          ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST "cd $REMOTE_PATH && cd server && php bin/console doctrine:migrations:migrate --no-interaction"
